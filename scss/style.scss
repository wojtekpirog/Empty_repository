@use "reset";
@use "colors" as colors;
@use "variables" as vars;

html {
  font-size: 10px;
}

body {
  height: 100vh;
  display: flex;
  flex-direction: column;
  text-align: center;
  font-family: "Montserrat", sans-serif;
  color: colors.$light;
  background-color: colors.$black;
  overflow: hidden;
}

h1 {
  font-size: 6rem;
  font-weight: 400;
  margin: 3rem 0;
}

section {
  height: 25vh;
  background-color: colors.$nightSky;
  border-bottom: 2px solid colors.$light;
  display: flex;
  // align-content: stretch;
  // `flex-wrap` jest potrzebny do pracy z `align-content`.
  // Domyśnie: `align-content: stretch;`
  // Zarówno `align-items`, jak i `align-content` domyślnie rozciągają zawartość elementów.
  // `align-content` biegnie w tą samą stronę, co `align-items`, a także wymaga, aby elementy sterowane były ułożone co najmniej w dwóch rzędach.

  // `flex-basis` jest uzależniony od `flex-direction`, oraz jest nadawany na dzieci, a dodatkowo ma wyższy priorytet niż `width`
  .square {
    width: 10%;
    height: 50px;
    font-size: 3rem;
    display: flex;
    justify-content: center;
    align-items: center;

    &.sq1 {
      background-color: colors.$indigo;
    }
    &.sq2 {
      background-color: colors.$tomato;
    }
    &.sq3 {
      background-color: colors.$royalBlue;
    }
    &.sq4 {
      background-color: colors.$gold;
    }
  }

  &.section1 {
    flex-direction: column;
    align-items: flex-start;

    .square {
      flex-basis: 100px;

      &.sq2 {
        flex-grow: 1;
      }
      &.sq4 {
        flex-grow: 1;
      }
    }
  }

  &.section2 {
    flex-direction: row;
    justify-content: space-around;
    align-items: center;
  }

  &.section3 {
    flex-direction: row-reverse;
    justify-content: space-between;

    .square {
      flex-grow: 1;
      height: 100%;

      &.sq3 {
        order: 1;
      }
    }
  }

  &.section4 {
    flex-direction: row-reverse;
    
    .sq1, .sq4 {
      align-self: flex-end;
    }

    .sq3 {
      align-self: center;
    }
  }
}
